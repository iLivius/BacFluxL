print(r'''
________             _______________             ______       
___  __ )_____ _________  ____/__  /___  _____  ____  / 
__  __  |  __ `/  ___/_  /_   __  /_  / / /_  |/_/_  /
_  /_/ // /_/ // /__ _  __/   _  / / /_/ /__>  < _  /___
/_____/ \__,_/ \___/ /_/      /_/  \__,_/ /_/|_| /_____/
                                                                                                            
BacFluxL v1.0.0


Livio Antonielli, May 2024
''')

# Modules:
import os
import sys
from urllib.parse import urlparse

# Configuration file:
configfile: 'config/config.yaml'

# Path to DBs and input/output directories in config file:
workdir: config['directories']['out_dir']
FASTQDIR = config['directories']['fastq_dir']
BLASTDB = config['directories']['blast_db']
DMNDDB = config['directories']['eggnog_db']
GTDBTKDB = config['directories']['gtdbtk_db']
BAKTADB = config['directories']['bakta_db']
PLATONDB = config['directories']['platon_db']

# AMR DBs (ABRicate):
DATABASES = ["argannot", "card", "ecoh", "ecoli_vf", "megares", "ncbi", "resfinder", "vfdb"]

# Hardware resources in config file:
CPUS = config['resources']['threads']

# Sanity check of genus parameter:
if config['parameters'] is not None and "genus" in config['parameters']:
    genus = config['parameters']["genus"]
    if genus is not None and len(genus) > 0:
        print(f"The 'genus' parameter is specified in the config file with value: '{genus}'.")
    else:
        print("The 'genus' parameter value is not specified in the config file and will be inferred automatically.")
else:
    print("The 'genus' parameter is not present in the config file.")

# Sanity check of Medaka parameter:
global input_mode
input_mode = None

if "medaka_model" in config['parameters']:
    model = config['parameters']["medaka_model"]
    if model is not None and len(model) > 0:
        print(f"The 'model' parameter of Medaka is specified in the config file with value: '{model}'.")
        if "fast" in model:
            input_mode = "--nano-raw"
        else:
            input_mode = "--nano-hq"
    else:
        print("The 'model' parameter of Medaka is not specified and no consensus sequences will be generated.")
        input_mode = "--nano-hq"
else:
    sys.stderr.write("\nThe 'medaka_model' parameter is not present in the config file.\n")
    sys.exit(0)    

# Sanity check of checkv db link parameter:
global id
id = None

if config['links'] is not None and "checkv_link" in config['links']:
    link = config['links']["checkv_link"]
    if link is not None and len(link) > 0:
        path = urlparse(link).path
        db = os.path.basename(path)
        id = os.path.splitext(os.path.splitext(db)[0])[0]
    else:
        print("The link to CheckV database is not specified and the latest version will be automatically downloaded.")
else:
    sys.stderr.write(f"The checkv_link parameter is not present. Please, check the config file.\n")
    sys.exit(0)

# Import FASTQ files from ONT input dir
SAMPLES, EXTENSIONS = glob_wildcards(os.path.join(FASTQDIR, '{sample}_ont.{extn}'))

if SAMPLES:
    for sample in sorted(SAMPLES):
        print(f"Sample {sample} will be processed.")
else:
    sys.stderr.write(f"No files in {FASTQDIR}. Please, check the directory.\n")
    sys.exit(0)

# Check if ONT files have nonunique extension:
if EXTENSIONS:
    for extension in EXTENSIONS:
        if extension.endswith(("fastq", "fq", "fastq.gz", "fq.gz")):
            if len(set(EXTENSIONS)) != 1:
                sys.stderr.write("More than one type of file extension detected\n\t")
                sys.stderr.write("\n\t".join(set(EXTENSIONS)))
                sys.exit(0)
        else:
            sys.stderr.write("\nFile format not recognized.\n")
            sys.exit(0)
else:
    sys.stderr.write("No suitable file extension found.\n")
    sys.exit(0)

# Create sample objects:
EXTN = EXTENSIONS[0]
ONT = '{sample}_ont.' + EXTN

rule all:
  input:
    filt_long = expand("01.pre-processing/{sample}_ont_filt.fastq", sample = SAMPLES),
    flye_dir = expand("02.assembly/{sample}", sample = SAMPLES),
    flye_contigs = expand("02.assembly/{sample}/assembly.fasta", sample = SAMPLES), 
    flye_contigs_lin = expand("02.assembly/{sample}/assembly_linearized.fasta", sample = SAMPLES),
    bestscore = expand("03.post-processing/contaminants/{sample}/bestscore.blob.blobDB.table.txt", sample = SAMPLES),
    abund = expand("03.post-processing/contaminants/{sample}/{sample}_composition.txt", sample = SAMPLES),
    list = expand("03.post-processing/contaminants/{sample}/contigs.list", sample = SAMPLES),
    decontam_contigs = expand("03.post-processing/contaminants/{sample}/assembly_decontam.fasta", sample = SAMPLES),
    dnaapler_dir = expand("03.post-processing/fix_start/{sample}", sample = SAMPLES),
    dnaapler_contigs = expand("03.post-processing/fix_start/{sample}/assembly_reoriented.fasta", sample = SAMPLES),
    checkm_stats = expand("03.post-processing/completeness_evaluation/{sample}/checkm_stats.tsv", sample = SAMPLES),
    checkm_lineage = expand("03.post-processing/completeness_evaluation/{sample}/lineage.ms", sample = SAMPLES),
    gtdbtk_dir = expand("04.taxonomy/{sample}", sample = SAMPLES),
    prokka_dir = expand("05.annotation/prokka/{sample}", sample = SAMPLES),
    bakta_dir = expand("05.annotation/bakta/{sample}", sample = SAMPLES),
    eggnog_dir = expand("05.annotation/eggnog/{sample}", sample = SAMPLES),
    antismash_dir = expand("05.annotation/antismash/{sample}", sample = SAMPLES),
    amr_tab = expand("06.AMR/ABRicate/{sample}/{db}.tsv", sample = SAMPLES, db = DATABASES),
    amr_summary = expand("06.AMR/ABRicate/{sample}/AMR_summary.txt", sample = SAMPLES),
    plasmid_dir = expand("07.plasmids/{sample}", sample = SAMPLES),
    blast = expand("07.plasmids/{sample}/blastout", sample = SAMPLES),
    plasmids = expand("07.plasmids/{sample}/verified_plasmids.txt", sample = SAMPLES),
    vs2_dir = expand("08.phages/virsorter/{sample}", sample = SAMPLES),
    checkv_dir = expand("08.phages/checkv/{sample}", sample = SAMPLES),
    multiqc_dir = "09.report"

rule filter_reads:
  input:
    long = os.path.join(FASTQDIR, ONT),
  output:
    filt_long = "01.pre-processing/{sample}_ont_filt.fastq"
  params:
    min_length = 1000,
    keep_percent = 90,
    target_bases = 500000000
  conda:
    "envs/filtlong.yaml"
  message:
    "--- Filtlong: Filter long reads. ---"
  log:
    "logs/filter_reads_{sample}.log"
  shell:
    """
    filtlong --min_length {params.min_length} --keep_percent {params.keep_percent} --target_bases {params.target_bases} {input.long} \
    > {output.filt_long} 2>{log}
    """

FASTA_LIN_CMD = r"""{if(NR==1) {printf "%s\n", $0} else {if(/^>/) {printf "\n%s\n", $0} else {printf $0}}}"""

rule assembly:
  input:
    filt_long = "01.pre-processing/{sample}_ont_filt.fastq"
  output:
    flye_dir = directory("02.assembly/{sample}"),
    flye_contigs = "02.assembly/{sample}/assembly.fasta", 
    flye_contigs_lin = temp("02.assembly/{sample}/assembly_linearized.fasta")
  params:
    input_mode = input_mode,
    iterations = 5
  resources:
    cpus = CPUS
  conda:
    "envs/flye.yaml"
  message:
    "--- Flye: Genome assembly with long reads. ---"
  log:
    "logs/genome_assembly_{sample}.log"
  shell:
    """
    flye {params.input_mode} {input.filt_long} --out-dir {output.flye_dir} \
    --threads {resources.cpus} --iterations {params.iterations} > {log} 2>&1

    cat {output.flye_contigs} | awk {FASTA_LIN_CMD:q} > {output.flye_contigs_lin}
    """

rule map_contigs:
  input:
    filt_long = "01.pre-processing/{sample}_ont_filt.fastq",
    flye_contigs = "02.assembly/{sample}/assembly.fasta",
  output:
    bam = temp("03.post-processing/contaminants/{sample}_map.bam"),
    bai = temp("03.post-processing/contaminants/{sample}_map.bam.bai")
  resources:
    cpus = CPUS
  conda:
    "envs/minimap.yaml"
  message:
    "--- Minimap2: Map reads against contigs. ---"
  log:
    "logs/map_contigs_{sample}.log"
  priority: 0
  shell:
    """
    minimap2 -ax map-ont {input.flye_contigs} {input.filt_long} 2> {log} | \
    samtools view -S -b -u -@ {resources.cpus} | \
    samtools sort -o {output.bam} -@ {resources.cpus} 2>> {log}
    
    samtools index {output.bam} -@ {resources.cpus} 2>> {log}
    """

rule blast_contigs:
  input:
    flye_contigs = "02.assembly/{sample}/assembly.fasta"
  output:
    blast = "03.post-processing/contaminants/{sample}/blastout"
  params:
    dir = BLASTDB,
    db = os.path.join(BLASTDB, "nt")
  resources:
    cpus = CPUS
  conda:
    "envs/blast.yaml"
  message:
    "--- BLAST: Align contigs against NCBI nt db. ---"
  log:
    "logs/blast_contigs_{sample}.log"
  priority: 0
  shell:
    """
    BLASTDB={params.dir} blastn -task megablast -query {input.flye_contigs} -db {params.db} -outfmt \
    '6 qseqid staxids bitscore pident evalue length qlen slen qcovs qcovhsp sskingdoms scomnames sscinames sblastnames stitle' \
    -num_threads {resources.cpus} -evalue 1e-5 -max_target_seqs 100 -max_hsps 10 \
    -out {output.blast} > {log} 2>&1
    """

rule blob_json:
  input:
    flye_contigs = "02.assembly/{sample}/assembly.fasta",
    bam = "03.post-processing/contaminants/{sample}_map.bam",
    bai = "03.post-processing/contaminants/{sample}_map.bam.bai",
    blast = "03.post-processing/contaminants/{sample}/blastout",
    nodes = os.path.join(BLASTDB, "nodes.dmp"),
    names = os.path.join(BLASTDB, "names.dmp")
  output:
    json = temp("03.post-processing/contaminants/{sample}/blob.blobDB.json"),
    cov = temp("03.post-processing/contaminants/{sample}/blob.{sample}_map.bam.cov")
  params:
    basename = "03.post-processing/contaminants/{sample}/blob"
  conda:
    "envs/blobtools.yaml"
  message:
    "--- BlobTools: Screen BLAST hits for contaminants. ---"
  log:
    "logs/blob_json_{sample}.log"
  priority: 0
  shell:
    """
    blobtools create -i {input.flye_contigs} -b {input.bam} -t {input.blast} --nodes {input.nodes} --names {input.names} \
    -o {params.basename} > {log} 2>&1
    """

rule blob_table:
  input:
    json = "03.post-processing/contaminants/{sample}/blob.blobDB.json"
  output:
    bestscore = "03.post-processing/contaminants/{sample}/bestscore.blob.blobDB.table.txt"
  params:
    basename = "03.post-processing/contaminants/{sample}/bestscore"
  conda:
    "envs/blobtools.yaml"
  message:
    "--- BlobTools: Collapse taxonomic assignment of BLAST hits according to sum of best scores. ---"
  log:
    "logs/blob_table_{sample}.log"
  priority: 0
  shell:
    """
    blobtools view --input {input.json} --out {params.basename} --taxrule bestsum --rank all --hits > {log} 2>&1
    """
  
# Execute either one rule or another according to presence/absence of 'genus' parameter
if "genus" in config['parameters'] and config['parameters']['genus'] is not None and len(config['parameters']['genus']) > 0:
  rule:
    input:
      bestscore = "03.post-processing/contaminants/{sample}/bestscore.blob.blobDB.table.txt",
      flye_contigs_lin = "02.assembly/{sample}/assembly_linearized.fasta"
    output:
      abund = "03.post-processing/contaminants/{sample}/{sample}_composition.txt",
      list = "03.post-processing/contaminants/{sample}/contigs.list",
      decontam_contigs = "03.post-processing/contaminants/{sample}/assembly_decontam.fasta"
    params:
      genus = config['parameters']['genus']    
    priority: 0
    shell:
      """
      for i in $(cat {input.bestscore} | sed '1,11d' | cut -f 22 | sort -u); do \
          cat {input.bestscore} | sed '1,11d' | awk -v var=$i 'BEGIN {{printf "%s%s", var, ": "}} $22 == var {{count++}} END {{printf "%.2f\\n", count/NR}}'; \
      done > {output.abund}

      echo "Sample {wildcards.sample} composition:"
      cat {output.abund}
      awk -v var="{params.genus}" 'tolower($22) ~ tolower("[:alpha:]*"var) {{print $1}}' {input.bestscore} > {output.list}
      grep -A1 -f {output.list} {input.flye_contigs_lin} | sed '/--/d' > {output.decontam_contigs}
      """
else:
  rule:
    input:
      bestscore = "03.post-processing/contaminants/{sample}/bestscore.blob.blobDB.table.txt",
      flye_contigs_lin = "02.assembly/{sample}/assembly_linearized.fasta"
    output:
      abund = "03.post-processing/contaminants/{sample}/{sample}_composition.txt",
      list = "03.post-processing/contaminants/{sample}/contigs.list",
      decontam_contigs = "03.post-processing/contaminants/{sample}/assembly_decontam.fasta"
    priority: 0
    shell:
      """
      for i in $(cat {input.bestscore} | sed '1,11d' | cut -f 22 | sort -u); do \
          cat {input.bestscore} | sed '1,11d' | awk -v var=$i 'BEGIN {{printf "%s%s", var, ": "}} $22 == var {{count++}} END {{printf "%.2f\\n", count/NR}}'; \
      done > {output.abund}

      echo "Sample {wildcards.sample} composition:"
      cat {output.abund}

      for i in $(cat {output.abund} | sort -t':' -k2 -nr | cut -d':' -f1 | sed -n '1p' | sed -e 's/Para//;s/Pseudo//;s/Paen//' | tr '[:upper:]' '[:lower:]'); do \
          awk -v var="$i" 'tolower($22) ~ tolower("[:alpha:]*"var) {{print $1}}' {input.bestscore}; \
      done > {output.list}

      grep -A1 -f {output.list} {input.flye_contigs_lin} | sed '/--/d' > {output.decontam_contigs}
      """

# Conditional rule execution according to presence/absence of 'medaka_model' parameter
if "medaka_model" in config['parameters'] and config['parameters']['medaka_model'] is not None and len(config['parameters']['medaka_model']) > 0:
  rule:
    input:
      filt_long = "01.pre-processing/{sample}_ont_filt.fastq",
      decontam_contigs = "03.post-processing/contaminants/{sample}/assembly_decontam.fasta"
    output:
      consensus_dir = directory("03.post-processing/consensus/{sample}"),
      consensus_contigs = "03.post-processing/consensus/{sample}/consensus.fasta"
    params:
      model = config['parameters']['medaka_model'] 
    resources:
      cpus = 2
    conda:
      "envs/medaka.yaml"
    message:
      "--- Medaka: Improve contig consensus with long filtered reads. ---"
    log:
      "logs/consensus_long_{sample}.log"
    shell:
      """
      medaka_consensus -i {input.filt_long} -d {input.decontam_contigs} -t {resources.cpus} -m {params.model} \
      -o {output.consensus_dir} > {log} 2>&1
      """

rule fix_start:
  input:
    consensus_contigs = lambda wildcards: "03.post-processing/consensus/{sample}/consensus.fasta".format(sample=wildcards.sample) if "medaka_model" in config['parameters'] and config['parameters']['medaka_model'] is not None and len(config['parameters']['medaka_model']) > 0 else "03.post-processing/contaminants/{sample}/assembly_decontam.fasta"
  output:
    dnaapler_dir = directory("03.post-processing/fix_start/{sample}"),
    dnaapler_contigs = "03.post-processing/fix_start/{sample}/assembly_reoriented.fasta"
  params:
    prefix = "assembly",
    evalue = 1e-10
  resources:
    cpus = CPUS
  conda:
    "envs/dnaapler.yaml"
  message:
    "--- dnaapler: Re-orient replicons. ---"
  log:
    "logs/fix_start_{sample}.log"
  shell:
      """
      dnaapler all -i {input.consensus_contigs} -p {params.prefix} -e {params.evalue} -t {resources.cpus} \
      -o {output.dnaapler_dir} --force > {log} 2>&1
      """

rule completeness_and_contamination:
  input:
    dnaapler_contigs = "03.post-processing/fix_start/{sample}/assembly_reoriented.fasta"
  output:
    checkm_dir = directory("03.post-processing/completeness_evaluation/{sample}"),
    checkm_stats = "03.post-processing/completeness_evaluation/{sample}/checkm_stats.tsv",
    checkm_lineage = "03.post-processing/completeness_evaluation/{sample}/lineage.ms"
  resources:
    cpus = CPUS
  conda:
    "envs/checkm.yaml"
  message:
    "--- CheckM: Assessment of genome completenness and contamination. ---"
  log:
    "logs/completenness_and_contamination_{sample}.log"
  priority: 0
  shell:
    """
    cp {input.dnaapler_contigs} {output.checkm_dir}
    checkm lineage_wf -t {resources.cpus} -x fasta {output.checkm_dir} {output.checkm_dir} > {log} 2>&1
    checkm qa -o 2 -t {resources.cpus} --tab_table -f {output.checkm_stats} {output.checkm_lineage} {output.checkm_dir} >> {log} 2>&1
    """

rule taxonomic_assignment:
  input:
    checkm_dir = "03.post-processing/completeness_evaluation/{sample}",
  output:
    gtdbtk_dir = directory("04.taxonomy/{sample}")
  params:
    gtdbtk_db = GTDBTKDB
  resources:
    cpus = CPUS,
    cpus_p = min(CPUS, 64)
  conda:
    "envs/gtdbtk.yaml"
  message:
    "--- GTDB-Tk: Taxonomic assignment. ---"
  log:
    "logs/taxonomic_assignment_{sample}.log"
  priority: 0
  shell:
    """
    GTDBTK_DATA_PATH={params.gtdbtk_db:q} \
    gtdbtk classify_wf -x fasta --genome_dir {input.checkm_dir} --cpus {resources.cpus} --pplacer_cpus {resources.cpus_p} --mash_db {params.gtdbtk_db:q}/mash/gtdb-tk_r214.msh \
    --out_dir {output.gtdbtk_dir} > {log} 2>&1

    rm -rf {input.checkm_dir}/*.fasta
    """

rule legacy_annotation:
  input:
    dnaapler_contigs = "03.post-processing/fix_start/{sample}/assembly_reoriented.fasta",
    abund = "03.post-processing/contaminants/{sample}/{sample}_composition.txt"
  output:
    prokka_dir = directory("05.annotation/prokka/{sample}")
  resources:
    cpus = CPUS
  conda:
    "envs/prokka.yaml"
  message:
    "--- PROKKA: Genome annotation. ---"
  log:
    "logs/annotation_{sample}.log"
  priority: 0
  shell:
    """
    for i in $(cat {input.abund} | sort -t':' -k2 -nr | cut -d':' -f1 | sed -n '1p'); do \
        prokka --kingdom Bacteria --genus $i --species sp. --strain {wildcards.sample} \
        --usegenus --gcode 11 --rfam --compliant --addgenes --mincontiglen 500 \
        --centre AIT --locustag {wildcards.sample} --prefix {wildcards.sample} \
        --outdir {output.prokka_dir} --cpus {resources.cpus} --force {input.dnaapler_contigs}; \
    done > {log} 2>&1
    """

rule accurate_annotation:
  input:
    dnaapler_contigs = "03.post-processing/fix_start/{sample}/assembly_reoriented.fasta",
    abund = "03.post-processing/contaminants/{sample}/{sample}_composition.txt"
  output:
    bakta_dir = directory("05.annotation/bakta/{sample}")
  params:
    bakta_db = BAKTADB
  resources:
    cpus = CPUS
  conda:
    "envs/bakta.yaml"
  message:
    "--- Bakta: Genome annotation. ---"
  log:
    "logs/better_annotation_{sample}.log"
  priority: 0
  shell:
    """
    for i in $(cat {input.abund} | sort -t':' -k2 -nr | cut -d':' -f1 | sed -n '1p'); do \
        bakta --db {params.bakta_db} --verbose --genus $i --species sp. --strain {wildcards.sample} \
        --translation-table 11 --min-contig-length 500 \
        --locus-tag {wildcards.sample} --prefix {wildcards.sample} \
        --output {output.bakta_dir} --threads {resources.cpus} --force {input.dnaapler_contigs}; \
    done > {log} 2>&1
    """    

rule functional_annotation:
  input:
    bakta_dir = "05.annotation/bakta/{sample}"
  output:
    temp_dir = temp(directory("05.annotation/eggnog/{sample}/eggnog_tmp")),
    eggnog_dir = directory("05.annotation/eggnog/{sample}")
  params:
    dmnd_db = DMNDDB
  resources:
    cpus = CPUS
  conda:
    "envs/eggnog-mapper.yaml"
  message:
    "--- EggNOG: Functional annotation. ---"
  log:
    "logs/functional_annotation_{sample}.log"
  priority: 0
  shell:
    """
    mkdir -p {output.temp_dir} {output.eggnog_dir}

    emapper.py -i {input.bakta_dir}/{wildcards.sample}.faa --output_dir {output.eggnog_dir} \
    --cpu {resources.cpus} -m diamond --data_dir {params.dmnd_db} \
    --output {wildcards.sample} --temp_dir {output.temp_dir} --override > {log} 2>&1
    """

rule secondary_metabolites_db:
  output:
    antismash_db = temp(directory("05.annotation/antismash/databases"))
  conda:
    "envs/antismash.yaml"
  message:
    "--- antiSMASH: database download. ---"
  log:
    "logs/secondary_metabolites_database.log"
  priority: 4
  shell:
    """
    download-antismash-databases --database-dir {output.antismash_db} > {log} 2>&1
    """    

rule secondary_metabolites_analysis:
  input:
    antismash_db = "05.annotation/antismash/databases",
    bakta_dir = "05.annotation/bakta/{sample}"
  output:
    antismash_dir = directory("05.annotation/antismash/{sample}")
  params:
    taxon = 'bacteria',
    genefinding_tool = 'none'
  conda:
    "envs/antismash.yaml"
  message:
    "--- antiSMASH: secondary metabolite annotation. ---"
  log:
    "logs/secondary_metabolites_{sample}.log"
  priority: 4
  shell:
    """
    antismash --output-dir {output.antismash_dir} --output-basename {wildcards.sample} \
    --databases {input.antismash_db} --taxon {params.taxon} --genefinding-tool {params.genefinding_tool} \
    {input.bakta_dir}/{wildcards.sample}.gbff > {log} 2>&1
    """ 

for sample in SAMPLES:
  for db in DATABASES:
    rule:
      input:
        dnaapler_contigs = expand("03.post-processing/fix_start/{sample}/assembly_reoriented.fasta", sample = sample)
      output:
        amr_tab = expand("06.AMR/ABRicate/{sample}/{db}.tsv", sample = sample, db = db)
      params:
        db = db
      conda:
        "envs/abricate.yaml"
      message:
        "--- ABRicate: AMR detection. ---"
      log:
        expand("logs/amr_{db}_in_{sample}_contigs.log", sample = sample, db = db)
      shell:
        """
        abricate --db {params.db} {input.dnaapler_contigs} --nopath --quiet > {output.amr_tab}
        """
 
rule AMR_summary:
  input:
    argannot = "06.AMR/ABRicate/{sample}/argannot.tsv",
    card = "06.AMR/ABRicate/{sample}/card.tsv",
    ecoh = "06.AMR/ABRicate/{sample}/ecoh.tsv",
    ecoli_vf = "06.AMR/ABRicate/{sample}/ecoli_vf.tsv",
    megares = "06.AMR/ABRicate/{sample}/megares.tsv",
    ncbi = "06.AMR/ABRicate/{sample}/ncbi.tsv",
    resfinder = "06.AMR/ABRicate/{sample}/resfinder.tsv",
    vfdb = "06.AMR/ABRicate/{sample}/vfdb.tsv"
  output:
    amr_summary = "06.AMR/ABRicate/{sample}/AMR_summary.txt"
  conda:
    "envs/abricate.yaml"
  shell:
    """
    abricate --summary \
    {input.argannot} {input.card} {input.ecoh} \
    {input.ecoli_vf} {input.megares} {input.ncbi} \
    {input.resfinder} {input.vfdb} > {output.amr_summary}
    """

rule plasmid_search:
  input:
    dnaapler_contigs = "03.post-processing/fix_start/{sample}/assembly_reoriented.fasta"
  output:
    plasmid_dir = directory("07.plasmids/{sample}"),
    blast = "07.plasmids/{sample}/blastout",
    plasmids = "07.plasmids/{sample}/verified_plasmids.txt"
  params:
    platon_db = PLATONDB,
    dir = BLASTDB,
    db = os.path.join(BLASTDB, "nt")
  resources:
    cpus = CPUS
  conda:
    "envs/platon.yaml"
  message:
    "--- Platon: Plasmid identification. ---"
  log:
    "logs/plasmid_search_{sample}.log"
  priority: 0
  shell:
    """
    platon --db {params.platon_db} --output {output.plasmid_dir} --verbose --threads {resources.cpus} {input.dnaapler_contigs} > {log} 2>&1
    
    BLASTDB={params.dir} blastn -task megablast -query {input.dnaapler_contigs} -db {params.db} -outfmt \
    '6 qseqid staxids bitscore pident evalue length qlen slen qcovs qcovhsp sskingdoms scomnames sscinames sblastnames stitle' \
    -num_threads {resources.cpus} -evalue 1e-5 -max_target_seqs 100 -max_hsps 10 \
    -out {output.blast} >> {log} 2>&1

    if [[ -s {output.plasmid_dir}/assembly_reoriented.plasmid.fasta ]] && grep -q ">" {output.plasmid_dir}/assembly_reoriented.plasmid.fasta; then
      while IFS= read -r i; do
        if grep -m 1 "$i" {output.blast} | grep -q "plasmid"; then
            echo "{wildcards.sample}: $i is a plasmid." >> {output.plasmids}
        else
            echo "{wildcards.sample}: $i was not verified by BLAST search." >> {output.plasmids}
        fi
      done < <(grep ">" {output.plasmid_dir}/assembly_reoriented.plasmid.fasta | sed 's/^>//g')
    else
      if [[ -v i ]]; then
        echo "Platon found no plasmid in {wildcards.sample} $i." > {output.plasmids}
      else
        echo "Platon found no plasmid in {wildcards.sample}." > {output.plasmids}
      fi
    fi
    """

rule viral_db:
  output:
    vs2_db = temp(directory("08.phages/vs2_db")),
    checkv_db = temp(directory("08.phages/checkv_db"))
  resources:
    cpus = 4
  conda:
    "envs/virsorter.yaml"
  params:
    checkv_link = config['links']['checkv_link'] if 'checkv_link' in config['links'] else None,
    tries = 5,
    db_id = id
  message:
    """
    --- Download VirSort2 database ---
    --- Download CheckV database ---
    """
  log:
    "logs/viral_databases.log"
  priority: 9
  shell:
    """
    virsorter setup -d {output.vs2_db} -j {resources.cpus} > {log} 2>&1
    if [ -z "{params.checkv_link}" ]; then
        checkv download_database {output.checkv_db} >> {log} 2>&1
    else
        wget --tries={params.tries} -c {params.checkv_link} -P {output.checkv_db} >> {log} 2>&1
        tar -xzvf {output.checkv_db}/{params.db_id}.tar.gz -C {output.checkv_db} >> {log} 2>&1
        diamond makedb --in {output.checkv_db}/{params.db_id}/genome_db/checkv_reps.faa \
        --db {output.checkv_db}/{params.db_id}/genome_db/checkv_reps >> {log} 2>&1
    fi
    """

rule viral_identification:
  input:
    dnaapler_contigs = "03.post-processing/fix_start/{sample}/assembly_reoriented.fasta",
    vs2_db = "08.phages/vs2_db",
    checkv_db = "08.phages/checkv_db"
  output:
    vs2_dir = directory("08.phages/virsorter/{sample}"),
    checkv_dir = directory("08.phages/checkv/{sample}")
  params:
    viral_groups = "dsDNAphage,NCLDV,RNA,ssDNA,lavidaviridae",
    min_score = 0.5,
    checkv_link = config['links']['checkv_link'] if 'checkv_link' in config['links'] else None,
    db_id = id
  resources:
    cpus = CPUS
  conda:
    "envs/virsorter.yaml"
  message:
    """
    --- VirSorter2: Identification of phages and prophages. ---
    --- CheckV: Quality assessment of viral genomes. ---
    """
  log:
    "logs/viral_identification_{sample}.log"
  priority: 8
  shell:
    """
    virsorter run  -i {input.dnaapler_contigs} -w {output.vs2_dir} -d {input.vs2_db} \
    --keep-original-seq --include-groups {params.viral_groups} --min-score {params.min_score} -j {resources.cpus} all > {log} 2>&1

    if [ -z "{params.checkv_link}" ]; then
        checkv end_to_end {output.vs2_dir}/final-viral-combined.fa {output.checkv_dir} \
      -t {resources.cpus} -d {input.checkv_db}/{params.db_id} >> {log} 2>&1 
    else
        checkv end_to_end {output.vs2_dir}/final-viral-combined.fa {output.checkv_dir} \
      -t {resources.cpus} -d {input.checkv_db}/checkv-db-v1.5 >> {log} 2>&1    
    fi
    """

rule multiqc:
  input:
    prokka_dir = expand("05.annotation/prokka/{sample}", sample = SAMPLES),
    bakta_dir = expand("05.annotation/bakta/{sample}", sample = SAMPLES)
  output:
    multiqc_dir = directory("09.report"),
    multiqc_yaml = temp("09.report/multiqc_config.yaml")
  conda:
    "envs/multiqc.yaml"
  message:
    "--- MultiQC: Aggregate results. ---"
  log:
    "logs/multiqc.log"  
  shell:
    """
    printf "%s\n" "show_analysis_paths: False" "show_analysis_time: False" > {output.multiqc_yaml}

    multiqc --config {output.multiqc_yaml} -d -dd 1 {input.prokka_dir} {input.bakta_dir} \
    --outdir {output.multiqc_dir} > {log} 2>&1
    """